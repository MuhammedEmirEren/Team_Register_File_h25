import os
import uuid
from PIL import Image, ImageEnhance, ImageFilter
from langchain_google_genai import ChatGoogleGenerativeAI

def get_new_path(original_path: str, suffix: str) -> str:
    """Generates a new unique path for an output image."""
    output_dir = os.path.join(os.path.dirname(original_path), "output")
    os.makedirs(output_dir, exist_ok=True)
    filename = f"{os.path.splitext(os.path.basename(original_path))[0]}_{suffix}_{uuid.uuid4().hex[:6]}.png"
    return os.path.join(output_dir, filename)

def analyze_image(image_path: str) -> dict:
    """Analyzes an image and returns its properties."""
    try:
        with Image.open(image_path) as img:
            width, height = img.size
            mode = img.mode
            
            # Simple brightness analysis
            grayscale = img.convert('L')
            pixels = list(grayscale.getdata())
            avg_brightness = sum(pixels) / len(pixels)
            
            analysis = {
                'width': width,
                'height': height,
                'mode': mode,
                'avg_brightness': avg_brightness,
                'is_dark': avg_brightness < 100,
                'is_small': width < 500 or height < 500,
                'aspect_ratio': width / height,
                'recommendations': []
            }
            
            # Generate recommendations
            if analysis['is_dark']:
                analysis['recommendations'].append(f"Increase brightness (current: {avg_brightness:.1f})")
            
            analysis['recommendations'].append("Enhance contrast for better dynamic range")
            
            if analysis['is_small']:
                analysis['recommendations'].append("Apply sharpening (small image)")
            
            analysis['recommendations'].append("Light noise reduction for smoothing")
            return analysis
            
    except Exception as e:
        print(f"❌ Error analyzing image: {e}")
        return {}

def ai_enhanced_image_processing(image_path: str) -> str:
    """
    Uses AI to analyze the image and decide on enhancements, then applies them.
    This is a hybrid approach that uses AI for decision making but direct Python for processing.
    """
    # Step 1: Analyze the image
    analysis = analyze_image(image_path)
    if not analysis:
        return None
    # Step 2: Use AI to decide on enhancement strategy
    llm = ChatGoogleGenerativeAI(
        model="gemini-1.5-flash",
        google_api_key="Enter API K",
        temperature=0.1,
    )
    
    ai_prompt = f"""
    You are an expert image enhancement specialist. Based on this image analysis, decide on the optimal enhancement strategy:

    Image Analysis:
    - Dimensions: {analysis['width']}x{analysis['height']} pixels
    - Color mode: {analysis['mode']}
    - Average brightness: {analysis['avg_brightness']:.1f} (0-255 scale)
    - Is dark: {analysis['is_dark']}
    - Is small: {analysis['is_small']}
    - Aspect ratio: {analysis['aspect_ratio']:.2f}

    Recommendations from analysis:
    {chr(10).join(f"- {rec}" for rec in analysis['recommendations'])}

    Please provide a specific enhancement plan in this exact format:
    BRIGHTNESS_FACTOR: [number between 0.8-1.5, or SKIP]
    CONTRAST_FACTOR: [number between 0.8-1.5, or SKIP]
    SHARPNESS_FACTOR: [number between 0.8-2.0, or SKIP]
    NOISE_REDUCTION_RADIUS: [number between 0.3-2.0, or SKIP]

    Consider:
    - If brightness < 90, suggest 1.2-1.4 brightness factor
    - If brightness > 90, suggest 1.0-1.2 or SKIP
    - Always enhance contrast slightly (1.1-1.3)
    - For small images, use higher sharpness (1.3-1.8)
    - Use light noise reduction (0.5-0.8) for final smoothing
    """
    
    try:
        ai_response = llm.invoke(ai_prompt)
        print(f"AI Enhancement Plan:\n{ai_response.content}")
        
        enhancement_plan = parse_ai_response(ai_response.content)
        
        # Step 3: Apply enhancements based on AI decision
        current_path = image_path
        
        if enhancement_plan.get('brightness') != 'SKIP':
            print(f"Applying brightness enhancement (factor: {enhancement_plan['brightness']})")
            current_path = increase_brightness(current_path, enhancement_plan['brightness'])
        
        if enhancement_plan.get('contrast') != 'SKIP':
            print(f"Applying contrast enhancement (factor: {enhancement_plan['contrast']})")
            current_path = increase_contrast(current_path, enhancement_plan['contrast'])
        
        if enhancement_plan.get('sharpness') != 'SKIP':
            print(f"Applying sharpness enhancement (factor: {enhancement_plan['sharpness']})")
            current_path = increase_sharpness(current_path, enhancement_plan['sharpness'])
        
        if enhancement_plan.get('noise_reduction') != 'SKIP':
            print(f"Applying noise reduction (radius: {enhancement_plan['noise_reduction']})")
            current_path = noise_reduction(current_path, enhancement_plan['noise_reduction'])
        return current_path
        
    except Exception as e:
        print(f"❌ AI processing failed: {e}")
        print("🔄 Falling back to rule-based enhancement...")
        return rule_based_enhancement(image_path, analysis)

def parse_ai_response(response: str) -> dict:
    """Parse the AI response to extract enhancement parameters."""
    plan = {}
    lines = response.split('\n')
    
    for line in lines:
        if 'BRIGHTNESS_FACTOR:' in line:
            value = line.split(':')[1].strip()
            plan['brightness'] = float(value) if value != 'SKIP' else 'SKIP'
        elif 'CONTRAST_FACTOR:' in line:
            value = line.split(':')[1].strip()
            plan['contrast'] = float(value) if value != 'SKIP' else 'SKIP'
        elif 'SHARPNESS_FACTOR:' in line:
            value = line.split(':')[1].strip()
            plan['sharpness'] = float(value) if value != 'SKIP' else 'SKIP'
        elif 'NOISE_REDUCTION_RADIUS:' in line:
            value = line.split(':')[1].strip()
            plan['noise_reduction'] = float(value) if value != 'SKIP' else 'SKIP'
    
    # Set defaults if not provided
    plan.setdefault('brightness', 1.1)
    plan.setdefault('contrast', 1.2)
    plan.setdefault('sharpness', 1.3)
    plan.setdefault('noise_reduction', 0.6)
    
    return plan

def rule_based_enhancement(image_path: str, analysis: dict) -> str:
    """Fallback rule-based enhancement if AI fails."""
    print("🔧 Applying rule-based enhancement...")
    
    current_path = image_path
    
    if analysis['is_dark']:
        current_path = increase_brightness(current_path, 1.3)
    
    current_path = increase_contrast(current_path, 1.2)
    
    if analysis['is_small']:
        current_path = increase_sharpness(current_path, 1.4)
    else:
        current_path = increase_sharpness(current_path, 1.2)
    
    current_path = noise_reduction(current_path, 0.3)
    
    return current_path

def increase_brightness(image_path: str, factor: float) -> str:
    """Increases the brightness of the image."""
    try:
        with Image.open(image_path) as img:
            enhancer = ImageEnhance.Brightness(img)
            enhanced_img = enhancer.enhance(factor)
            output_path = get_new_path(image_path, "brightness")
            enhanced_img.save(output_path)
            print(f"Saved to: {os.path.basename(output_path)}")
            return output_path
    except Exception as e:
        print(f"Error: {e}")
        return image_path

def increase_contrast(image_path: str, factor: float) -> str:
    """Increases the contrast of the image."""
    try:
        with Image.open(image_path) as img:
            enhancer = ImageEnhance.Contrast(img)
            enhanced_img = enhancer.enhance(factor)
            output_path = get_new_path(image_path, "contrast")
            enhanced_img.save(output_path)
            print(f"Saved to: {os.path.basename(output_path)}")
            return output_path
    except Exception as e:
        print(f"Error: {e}")
        return image_path

def increase_sharpness(image_path: str, factor: float) -> str:
    """Increases the sharpness of the image."""
    try:
        with Image.open(image_path) as img:
            enhancer = ImageEnhance.Sharpness(img)
            enhanced_img = enhancer.enhance(factor)
            output_path = get_new_path(image_path, "sharpness")
            enhanced_img.save(output_path)
            print(f"Saved to: {os.path.basename(output_path)}")
            return output_path
    except Exception as e:
        print(f"Error: {e}")
        return image_path

def noise_reduction(image_path: str, radius: float) -> str:
    """Reduces noise in the image using Gaussian blur."""
    try:
        with Image.open(image_path) as img:
            filtered_img = img.filter(ImageFilter.GaussianBlur(radius=radius))
            output_path = get_new_path(image_path, "final_enhanced")
            filtered_img.save(output_path)
            print(f"Saved to: {os.path.basename(output_path)}")
            return output_path
    except Exception as e:
        print(f"Error: {e}")
        return image_path

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    image_path = os.path.join(script_dir, "input_image.png")
    
    if not os.path.exists(image_path):
        print(f"Error: Input image '{image_path}' not found!")
        return
    
    final_image = ai_enhanced_image_processing(image_path)
    
if __name__ == "__main__":
    main()
